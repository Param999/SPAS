installed.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library("ggplot2", lib.loc="~/R/win-library/3.2")
library(ggplot2)
head(diamonds)
library(ggplot2)
head(diamonds)
cplot(diamonds$carat, diamonds$price, color=diamonds$clarity)
library(ggplot2)
head(diamonds)
qplot(diamonds$carat, diamonds$price, color=diamonds$clarity)
install.packages("dygraphs")
install.packages('neuralnet')
library("neuralnet")
#Going to create a neural network to perform sqare rooting
#Type ?neuralnet for more information on the neuralnet library
#Generate 50 random numbers uniformly distributed between 0 and 100
#And store them as a dataframe
traininginput <-  as.data.frame(runif(50, min=0, max=100))
trainingoutput <- sqrt(traininginput)
#Column bind the data into one variable
trainingdata <- cbind(traininginput,trainingoutput)
colnames(trainingdata) <- c("Input","Output")
#Train the neural network
#Going to have 10 hidden layers
#Threshold is a numeric value specifying the threshold for the partial
#derivatives of the error function as stopping criteria.
net.sqrt <- neuralnet(Output~Input,trainingdata, hidden=10, threshold=0.01)
print(net.sqrt)
#Plot the neural network
plot(net.sqrt)
#Test the neural network on some training data
testdata <- as.data.frame((1:10)^2) #Generate some squared numbers
net.results <- compute(net.sqrt, testdata) #Run them through the neural network
#Lets see what properties net.sqrt has
ls(net.results)
#Lets see the results
print(net.results$net.result)
#Lets display a better version of the results
cleanoutput <- cbind(testdata,sqrt(testdata),
as.data.frame(net.results$net.result))
colnames(cleanoutput) <- c("Input","Expected Output","Neural Net Output")
print(cleanoutput)
tuna <- read.csv("train.csv",TRUE,",")
head(tuna)
tuna <- read.csv("train.csv",TRUE,",")
hist(bData$X, main=" hours-per-week
", ylab="No.of People", xlab="Hours")
tuna <- read.csv("train.csv",TRUE,",")
hist(tuna$X, main=" hours-per-week
", ylab="No.of People", xlab="Hours")
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
shiny::runApp('C:/Users/varun/Desktop/Shiny')
tuna <- read.csv("book1.csv",TRUE,","),
head(tuna)
shiny::runApp('C:/Users/varun/Desktop/Major Project/R Studio/Dummy Project')
shiny::runApp('C:/Users/varun/Desktop/Major Project/R Studio/Dummy Project')
shiny::runApp('C:/Users/varun/Desktop/Major Project/R Studio/Dummy Project')
shiny::runApp('C:/Users/varun/Desktop/Major Project/R Studio/Dummy Project')
shiny::runApp('C:/Users/varun/Desktop/Major Project/R Studio/Dummy Project')
shiny::runApp('C:/Users/varun/Desktop/Major Project/R Studio/Dummy Project')
shiny::runApp('C:/Users/varun/Desktop/Major Project/R Studio/Dummy Project')
shiny::runApp('C:/Users/varun/Desktop/Major Project/R Studio/Dummy Project')
shiny::runApp('C:/Users/varun/Desktop/Major Project/R Studio')
shiny::runApp('C:/Users/varun/Desktop/Major Project/R Studio/Dummy Project')
shiny::runApp('C:/Users/varun/Desktop/Major Project/R Studio/Dummy Project')
shiny::runApp('C:/Users/varun/Desktop/Major Project/R Studio/Dummy Project')
shiny::runApp('C:/Users/varun/Desktop/Major Project/R Studio/Dummy Project')
shiny::runApp('C:/Users/varun/Desktop/Major Project/R Studio/Dummy Project')
shiny::runApp('C:/Users/varun/Desktop/Major Project/R Studio/Dummy Project')
shiny::runApp('C:/Users/varun/Desktop/Major Project/R Studio/Dummy Project')
shiny::runApp('C:/Users/varun/Desktop/Major Project/R Studio/Dummy Project')
shiny::runApp('C:/Users/varun/Desktop/Major Project/R Studio/Dummy Project')
shiny::runApp('C:/Users/varun/Desktop/Major Project/R Studio')
shiny::runApp('C:/Users/varun/Desktop/Major Project/R Studio/Dummy Project')
shiny::runApp('C:/Users/varun/Desktop/Major Project/R Studio/Dummy Project')
shiny::runApp('C:/Users/varun/Desktop/Major Project/R Studio/Dummy Project')
shiny::runApp('C:/Users/varun/Desktop/Major Project/R Studio/Dummy Project')
shiny::runApp('C:/Users/varun/Desktop/Major Project/R Studio/Dummy Project')
shiny::runApp('C:/Users/varun/Desktop/Major Project/R Studio/Dummy Project')
shiny::runApp('C:/Users/varun/Desktop/Major Project/R Studio/Dummy Project')
shiny::runApp('C:/Users/varun/Desktop/Major Project/R Studio/Dummy Project')
shiny::runApp('C:/Users/varun/Desktop/Major Project/R Studio/Dummy Project')
install.packages("rpart")
install.packages("randomForest")
install.packages("RWeka")
DNA <- read.csv("splice_data.txt", header=T)
head(DNA)
library(datasets)
names(infert)
library(neuralnet)
nn <- neuralnet(
case~age+parity+induced+spontaneous,
data=infert, hidden=2, err.fct="ce",
linear.output=FALSE)
# basic
nn
# reults options
names(nn)
# result matrix
nn$result.matrix
out <- cbind(nn$covariate,nn$net.result[[1]])
dimnames(out) <- list(NULL, c("age", "parity","induced","spontaneous","nn-output"))
head(out)
head(nn$generalized.weights[[1]])
plot(nn)
library(datasets)
names(infert)
library(neuralnet)
nn <- neuralnet(
case~age+parity+induced+spontaneous,
data=infert, hidden=2, err.fct="ce",
linear.output=FALSE)
# basic
nn
# reults options
names(nn)
# result matrix
nn$result.matrix
out <- cbind(nn$covariate,nn$net.result[[1]])
dimnames(out) <- list(NULL, c("age", "parity","induced","spontaneous","nn-output"))
head(out)
head(nn$generalized.weights[[1]])
plot(nn)
library(datasets)
names(infert)
library(neuralnet)
head(names)
nn <- neuralnet(
case~age+parity+induced+spontaneous,
data=infert, hidden=2, err.fct="ce",
linear.output=FALSE)
# basic
nn
# reults options
names(nn)
# result matrix
nn$result.matrix
out <- cbind(nn$covariate,nn$net.result[[1]])
dimnames(out) <- list(NULL, c("age", "parity","induced","spontaneous","nn-output"))
head(out)
head(nn$generalized.weights[[1]])
plot(nn)
new.cars <- data.frame(wt=c(1.7, 2.4, 3.6))
new.cars <- data.frame(wt=c(1.7, 2.4, 3.6))
predict(Model, newdata=new.cars)
new.cars <- data.frame(wt=c(1.7, 2.4, 3.6))
predict(cars, newdata=new.cars)
new.cars <- data.frame(wt=c(1.7, 2.4, 3.6))
head(new.cars)
predict(cars, newdata=new.cars)
new.cars <- data.frame(wt=c(1.7, 2.4, 3.6))
head(new.cars)
predict(new.cars, newdata=new.cars)
new.cars <- data.frame(wt=c(1.7, 2.4, 3.6))
head(new.cars)
predict(new.cars, newdata=new.cars, interval='confidence')
require(graphics)
## Predictions
x <- rnorm(15)
y <- x + rnorm(15)
predict(lm(y ~ x))
new <- data.frame(x = seq(-3, 3, 0.5))
predict(lm(y ~ x), new, se.fit = TRUE)
pred.w.plim <- predict(lm(y ~ x), new, interval = "prediction")
pred.w.clim <- predict(lm(y ~ x), new, interval = "confidence")
matplot(new$x, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
## Prediction intervals, special cases
##  The first three of these throw warnings
w <- 1 + x^2
fit <- lm(y ~ x)
wfit <- lm(y ~ x, weights = w)
predict(fit, interval = "prediction")
predict(wfit, interval = "prediction")
predict(wfit, new, interval = "prediction")
predict(wfit, new, interval = "prediction", weights = (new$x)^2)
predict(wfit, new, interval = "prediction", weights = ~x^2)
##-- From  aov(.) example ---- predict(.. terms)
npk.aov <- aov(yield ~ block + N*P*K, npk)
(termL <- attr(terms(npk.aov), "term.labels"))
(pt <- predict(npk.aov, type = "terms"))
pt. <- predict(npk.aov, type = "terms", terms = termL[1:4])
stopifnot(all.equal(pt[,1:4], pt.,
tolerance = 1e-12, check.attributes = FALSE))
require(graphics)
## Predictions
x <- rnorm(15)
y <- x + rnorm(15)
predict(lm(y ~ x))
new <- data.frame(x = seq(-3, 3, 0.5))
predict(lm(y ~ x), new, se.fit = TRUE)
pred.w.plim <- predict(lm(y ~ x), new, interval = "prediction")
pred.w.clim <- predict(lm(y ~ x), new, interval = "confidence")
matplot(new$x, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
## Prediction intervals, special cases
##  The first three of these throw warnings
w <- 1 + x^2
fit <- lm(y ~ x)
wfit <- lm(y ~ x, weights = w)
predict(fit, interval = "prediction")
predict(wfit, interval = "prediction")
predict(wfit, new, interval = "prediction")
predict(wfit, new, interval = "prediction", weights = (new$x)^2)
predict(wfit, new, interval = "prediction", weights = ~x^2)
##-- From  aov(.) example ---- predict(.. terms)
npk.aov <- aov(yield ~ block + N*P*K, npk)
(termL <- attr(terms(npk.aov), "term.labels"))
(pt <- predict(npk.aov, type = "terms"))
pt. <- predict(npk.aov, type = "terms", terms = termL[1:4])
stopifnot(all.equal(pt[,1:4], pt.,
tolerance = 1e-12, check.attributes = FALSE))
require(graphics)
## Predictions
x <- rnorm(15)
y <- x + rnorm(15)
#predict(lm(y ~ x))
new <- data.frame(x = seq(-3, 3, 0.5))
#predict(lm(y ~ x), new, se.fit = TRUE)
#pred.w.plim <- predict(lm(y ~ x), new, interval = "prediction")
#pred.w.clim <- predict(lm(y ~ x), new, interval = "confidence")
#matplot(new$x, cbind(pred.w.clim, pred.w.plim[,-1]),
#lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
## Prediction intervals, special cases
##  The first three of these throw warnings
w <- 1 + x^2
fit <- lm(y ~ x)
wfit <- lm(y ~ x, weights = w)
#predict(fit, interval = "prediction")
#predict(wfit, interval = "prediction")
#predict(wfit, new, interval = "prediction")
#predict(wfit, new, interval = "prediction", weights = (new$x)^2)
predict(wfit, new, interval = "prediction", weights = ~x^2)
##-- From  aov(.) example ---- predict(.. terms)
#npk.aov <- aov(yield ~ block + N*P*K, npk)
#(termL <- attr(terms(npk.aov), "term.labels"))
#(pt <- predict(npk.aov, type = "terms"))
#pt. <- predict(npk.aov, type = "terms", terms = termL[1:4])
#stopifnot(all.equal(pt[,1:4], pt.,
#                   tolerance = 1e-12, check.attributes = FALSE))
require(graphics)
x <- rnorm(15)
y <- x + rnorm(15)
new <- data.frame(x = seq(-3, 3, 0.5))
w <- 1 + x^2
fit <- lm(y ~ x)
wfit <- lm(y ~ x, weights = w)
predict(wfit, new, interval = "prediction", weights = ~x^2)
require(graphics)
x <- rnorm(15)
y <- x + rnorm(15)
new <- data.frame(x = seq(-3, 3, 0.5))
w <- 1 + x^2
fit <- lm(y ~ x)
wfit <- lm(y ~ x, weights = w)
predict(wfit, new, interval = "prediction", weights = ~x^2)
require(graphics)
## Predictions
x <- rnorm(15)
y <- x + rnorm(15)
predict(lm(y ~ x))
new <- data.frame(x = seq(-3, 3, 0.5))
predict(lm(y ~ x), new, se.fit = TRUE)
pred.w.plim <- predict(lm(y ~ x), new, interval = "prediction")
pred.w.clim <- predict(lm(y ~ x), new, interval = "confidence")
matplot(new$x, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
## Prediction intervals, special cases
##  The first three of these throw warnings
w <- 1 + x^2
fit <- lm(y ~ x)
wfit <- lm(y ~ x, weights = w)
predict(fit, interval = "prediction")
predict(wfit, interval = "prediction")
predict(wfit, new, interval = "prediction")
predict(wfit, new, interval = "prediction", weights = (new$x)^2)
predict(wfit, new, interval = "prediction", weights = ~x^2)
##-- From  aov(.) example ---- predict(.. terms)
npk.aov <- aov(yield ~ block + N*P*K, npk)
(termL <- attr(terms(npk.aov), "term.labels"))
(pt <- predict(npk.aov, type = "terms"))
pt. <- predict(npk.aov, type = "terms", terms = termL[1:4])
stopifnot(all.equal(pt[,1:4], pt.,
tolerance = 1e-12, check.attributes = FALSE))
library("MASS")
> data(cats)
> str(cats)
'data.frame':   144 obs. of  3 variables:
$ Sex: Factor w/ 2 levels "F","M": 1 1 1 1 1 1 1 1 1 1 ...
$ Bwt: num  2 2 2 2.1 2.1 2.1 2.1 2.1 2.1 2.1 ...
$ Hwt: num  7 7.4 9.5 7.2 7.3 7.6 8.1 8.2 8.3 8.5 ...
> summary(cats)
library("MASS")
data(cats)
str(cats)
summary(cats)
# Set random seed. Don't remove this line.
set.seed(1)
# Chop up iris in my_iris and species
my_iris <- iris[-5]
species <- iris$Species
# Perform k-means clustering on my_iris: kmeans_iris
kmeans_iris <- kmeans(my_iris,3)
# Compare the actual Species to the clustering using table()
table(species, kmeans_iris$cluster)
# Plot Petal.Width against Petal.Length, coloring by cluster
plot(Petal.Length ~ Petal.Width, data = my_iris, col = kmeans_iris$cluster)
# Set random seed. Don't remove this line.
set.seed(1)
# Chop up iris in my_iris and species
my_iris <- iris[-5]
species <- iris$Species
# Perform k-means clustering on my_iris: kmeans_iris
kmeans_iris <- kmeans(my_iris,3)
# Compare the actual Species to the clustering using table()
table(species, kmeans_iris$cluster)
# Plot Petal.Width against Petal.Length, coloring by cluster
plot(Petal.Length ~ Petal.Width, data = my_iris, col = kmeans_iris$cluster)
# Set random seed. Don't remove this line.
set.seed(1)
# Take a look at the iris dataset
str(iris)
summary(iris)
# A decision tree model has been built for you
tree <- rpart(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width,
data = iris, method = "class")
# A dataframe containing unseen observations
unseen <- data.frame(Sepal.Length = c(5.3, 7.2),
Sepal.Width = c(2.9, 3.9),
Petal.Length = c(1.7, 5.4),
Petal.Width = c(0.8, 2.3))
# Predict the label of the unseen observations. Print out the result.
predict(tree,unseen,type = "class")
library(rattle)
library(rpart.plot)
library(RColorBrewer)
# Set random seed. Don't remove this line.
set.seed(1)
# Take a look at the iris dataset
str(iris)
summary(iris)
# A decision tree model has been built for you
tree <- rpart(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width,
data = iris, method = "class")
# A dataframe containing unseen observations
unseen <- data.frame(Sepal.Length = c(5.3, 7.2),
Sepal.Width = c(2.9, 3.9),
Petal.Length = c(1.7, 5.4),
Petal.Width = c(0.8, 2.3))
# Predict the label of the unseen observations. Print out the result.
predict(tree,unseen,type = "class")
library(rattle)
library(rpart.plot)
library(RColorBrewer)
# Set random seed. Don't remove this line.
set.seed(1)
# Take a look at the iris dataset
str(iris)
summary(iris)
# A decision tree model has been built for you
tree <- rpart(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width,
data = iris, method = "class")
# A dataframe containing unseen observations
unseen <- data.frame(Sepal.Length = c(5.3, 7.2),
Sepal.Width = c(2.9, 3.9),
Petal.Length = c(1.7, 5.4),
Petal.Width = c(0.8, 2.3))
# Predict the label of the unseen observations. Print out the result.
predict(tree,unseen,type = "class")
library(stringr)
setwd("C:/xampp/htdocs/SPAS/pages/RScripts")
dummy <- read.xls("Book1.xlsx")
var <- str_split_fixed(dummy$day1, ",", 3)
var[1]
var[2]
var[3]
library(stringr)
setwd("C:/xampp/htdocs/SPAS/pages/RScripts")
dummy <- read.xls("Book1.xlsx")
var <- str_split_fixed(dummy$day1, ",", 3)
var[1]
var[2]
var[3]
library(stringr)
setwd("C:/xampp/htdocs/SPAS/pages/RScripts")
dummy <- read.xls("Book1.xlsx")
var <- str_split_fixed(dummy$day1, ",", 3)
var[1]
var[2]
var[3]
library(gdata)
library(stringr)
setwd("C:/xampp/htdocs/SPAS/pages/RScripts")
dummy <- read.xls("Book1.xlsx")
var <- str_split_fixed(dummy$day1, ",", 3)
var[1]
var[2]
var[3]
library(gdata)
library(stringr)
setwd("C:/xampp/htdocs/SPAS/pages/RScripts")
dummy <- read.xls("Book1.xlsx")
var <- str_split_fixed(dummy$day1, ",", 3)
var[1]
var[2]
var[3]
library(gdata)
library(stringr)
setwd("C:/xampp/htdocs/SPAS/pages/RScripts")
dummy <- read.xls("Book1.xlsx")
var <- str_split_fixed(dummy$day1, ",", 3)
var[1]
var[2]
var[3]
var2 <- str_split_fixed(var[1], ";", 4)
var2
library(gdata)
library(stringr)
setwd("C:/xampp/htdocs/SPAS/pages/RScripts")
dummy <- read.xls("Book1.xlsx")
var <- str_split_fixed(dummy$day1, ",", 3)
var[1]
var[2]
var[3]
var2 <- substr(var2,start=2,stop=9)
var2 <- str_split_fixed(var[1], ";", 4)
var2
library(gdata)
library(stringr)
setwd("C:/xampp/htdocs/SPAS/pages/RScripts")
dummy <- read.xls("Book1.xlsx")
var <- str_split_fixed(dummy$day1, ",", 3)
var[1]
var[2]
var[3]
var2 <- substr(var[1],start=2,stop=9)
var2 <- str_split_fixed(var[1], ";", 4)
var2
library(gdata)
library(stringr)
setwd("C:/xampp/htdocs/SPAS/pages/RScripts")
dummy <- read.xls("Book1.xlsx")
var <- str_split_fixed(dummy$day1, ",", 3)
var[1]
var[2]
var[3]
var2 <- substr(var[1],start=2,stop=9)
#var2 <- str_split_fixed(var[1], ";", 4)
var2
library(gdata)
library(stringr)
setwd("C:/xampp/htdocs/SPAS/pages/RScripts")
dummy <- read.xls("Book1.xlsx")
var <- str_split_fixed(dummy$day1, ",", 3)
var[1]
var[2]
var[3]
var2 <- substr(var[1],start=2,stop=9)
var2 <- str_split_fixed(var2, ";", 4)
var2
